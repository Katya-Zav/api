{
	"info": {
		"_postman_id": "c96014c6-0317-40aa-a336-5b51a5a45db4",
		"name": "DemoShopping my",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38535142",
		"_collection_link": "https://www.postman.com/security-administrator-55785195/workspace/my-workspace/collection/38535142-c96014c6-0317-40aa-a336-5b51a5a45db4?action=share&source=collection_link&creator=38535142"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Registration",
					"item": [
						{
							"name": "400 ERROR - new user registration with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"eoydf\",\n  \"password\": \"1234\"\n}"
								},
								"url": {
									"raw": "{{url}}register",
									"host": [
										"{{url}}register"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 ERROR - new user registration with invalid username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"eo\",\n  \"password\": \"1234qwer\"\n}"
								},
								"url": {
									"raw": "{{url}}register",
									"host": [
										"{{url}}register"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 OK - new user registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username ===",
											"function generateUsername(minLength = 3, maxLength = 15) {",
											"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_';",
											"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
											"    let result = '';",
											"    for (let i = 0; i < length; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
											"    }",
											"    return result;",
											"}",
											"",
											"// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è ===",
											"function generatePassword(length = 10) {",
											"    const letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"    const digits = '0123456789';",
											"    const all = letters + digits;",
											"",
											"    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –±—É–∫–≤—É –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É",
											"    let password = '';",
											"    password += letters.charAt(Math.floor(Math.random() * letters.length));",
											"    password += digits.charAt(Math.floor(Math.random() * digits.length));",
											"",
											"    // –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö",
											"    for (let i = 2; i < length; i++) {",
											"        password += all.charAt(Math.floor(Math.random() * all.length));",
											"    }",
											"",
											"    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã",
											"    password = password.split('').sort(() => 0.5 - Math.random()).join('');",
											"    return password;",
											"}",
											"",
											"// === –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è ===",
											"const username = generateUsername();",
											"const password = generatePassword();",
											"",
											"pm.environment.set(\"username\", username);",
											"pm.environment.set(\"password\", password);",
											"",
											"console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω username: ${username}`);",
											"console.log(`üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω password: ${password}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{url}}register",
									"host": [
										"{{url}}register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authorization",
					"item": [
						{
							"name": "200 OK - Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"access_key\", response.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 ERROR - Authorization with wrong data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"katya\",\n  \"password\": \"1234qwew\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add new user (admin)",
					"item": [
						{
							"name": "200 OK - add new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Egor\",\n  \"password\": \"123qwert\"\n}"
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 ERROR - add new user with wrong data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Eg\",\n  \"password\": \"123qwert\"\n}"
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all user_id and login",
					"item": [
						{
							"name": "200 OK - get all user_id and login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON (–æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)",
											"const users = pm.response.json();",
											"",
											"// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ username –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è",
											"const username = pm.environment.get(\"username\");",
											"",
											"if (username) {",
											"    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è",
											"    const user = users.find(u => u.login === username);",
											"    ",
											"    if (user) {",
											"        pm.environment.set(\"random_user_id\", user.user_id);",
											"        console.log(`‚úÖ User ID for '${username}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ 'random_user_id': ${user.user_id}`);",
											"    } else {",
											"        console.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '${username}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`);",
											"    }",
											"} else {",
											"    console.error(\"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'username' –Ω–µ –∑–∞–¥–∞–Ω–∞.\");",
											"}",
											"",
											"// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ª–æ–≥–∏–Ω–æ–º \"Egor\"",
											"const egor = users.find(u => u.login === \"Egor\");",
											"if (egor) {",
											"    pm.environment.set(\"egor_user_id\", egor.user_id);",
											"    console.log(`‚úÖ User ID for 'Egor' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ 'egor_user_id': ${egor.user_id}`);",
											"} else {",
											"    console.log(\"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º 'Egor' –Ω–µ –Ω–∞–π–¥–µ–Ω.\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete user by ID",
					"item": [
						{
							"name": "200 OK - delete user (from add new user)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}users/{{egor_user_id}}",
									"host": [
										"{{url}}users"
									],
									"path": [
										"{{egor_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 ERROR - delete user with non-existent ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}users/{{egor_user_id}}",
									"host": [
										"{{url}}users"
									],
									"path": [
										"{{egor_user_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "200 OK - get the product catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
									"function checkField(fieldName, checkFn) {",
									"    return response.every(item => checkFn(item[fieldName]));",
									"}",
									"",
									"const checks = [",
									"    {",
									"        name: \"product_id is number\",",
									"        passed: checkField(\"product_id\", val => typeof val === \"number\")",
									"    },",
									"    {",
									"        name: \"name is string\",",
									"        passed: checkField(\"name\", val => typeof val === \"string\")",
									"    },",
									"    {",
									"        name: \"description is string\",",
									"        passed: checkField(\"description\", val => typeof val === \"string\")",
									"    },",
									"    {",
									"        name: \"price is string\",",
									"        passed: checkField(\"price\", val => typeof val === \"string\")",
									"    },",
									"    {",
									"        name: \"category is string\",",
									"        passed: checkField(\"category\", val => typeof val === \"string\")",
									"    },",
									"    {",
									"        name: \"manufacturer is string\",",
									"        passed: checkField(\"manufacturer\", val => typeof val === \"string\")",
									"    },",
									"    {",
									"        name: \"imageUrl is string\",",
									"        passed: checkField(\"imageUrl\", val => typeof val === \"string\")",
									"    },",
									"    {",
									"        name: \"freeShipping is 0 or 1\",",
									"        passed: checkField(\"freeShipping\", val => (typeof val === \"number\" && (val === 0 || val === 1)))",
									"    }",
									"];",
									"",
									"// –°–æ–∑–¥–∞—ë–º pm.test –∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ",
									"checks.forEach(check => {",
									"    pm.test(check.name, () => {",
									"        pm.expect(check.passed).to.be.true;",
									"    });",
									"    console.log(`${check.name}: ${check.passed ? \"passed\" : \"failed\"}`);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}products",
							"host": [
								"{{url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - add new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseText = pm.response.text();",
									"",
									"// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: –∏—â–µ—Ç —Å–ª–æ–≤–æ \"ID:\" –∏ –ø–µ—Ä–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –Ω–µ–≥–æ",
									"const match = responseText.match(/ID:\\s*(\\d+)/i);",
									"",
									"if (match && match[1]) {",
									"    const productId = match[1];",
									"    pm.environment.set(\"product_id\", productId); // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ QA",
									"    console.log(\"‚úÖ Product ID saved to QA environment:\", productId);",
									"} else {",
									"    console.warn(\"‚ö†Ô∏è ID not found in response\");",
									"}",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains success message\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID:\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const categories = [\"Phone\", \"Watches\", \"Laptop\"];",
									"const manufacturers = {",
									"    \"Phone\": [\"Samsung Galaxy S23\", \"iPhone 14 Pro\", \"Huawei P50\", \"Xiaomi Redmi Note 12\"],",
									"    \"Watches\": [\"Apple Watch Series 9\", \"Samsung Galaxy Watch 6\", \"Huawei Watch GT 4\", \"Xiaomi Mi Watch\"],",
									"    \"Laptop\": [\"MacBook Air M2\", \"Samsung Galaxy Book3\", \"Huawei MateBook X\", \"Xiaomi Mi Notebook Pro\"]",
									"};",
									"",
									"const brands = {",
									"    \"Samsung\": \"Samsung\",",
									"    \"Apple\": \"Apple\",",
									"    \"Huawei\": \"Huawei\",",
									"    \"Xiaomi\": \"Xiaomi\"",
									"};",
									"",
									"const shippingOptions = [true, false];",
									"",
									"// –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä",
									"function randomFromArray(arr) {",
									"    return arr[Math.floor(Math.random() * arr.length)];",
									"}",
									"",
									"// –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–æ–¥–µ–ª–∏",
									"const category = randomFromArray(categories);",
									"const model = randomFromArray(manufacturers[category]);",
									"",
									"// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏",
									"let manufacturer = Object.keys(brands).find(brand => model.toLowerCase().includes(brand.toLowerCase()));",
									"if (!manufacturer) manufacturer = \"Example Brand\"; // fallback",
									"",
									"// –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è",
									"const name = model;",
									"const description = `–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${name}`;",
									"const price = Math.floor(Math.random() * 5000) + 1;",
									"const freeShipping = randomFromArray(shippingOptions);",
									"",
									"// –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
									"const imageMap = {",
									"    \"Phone\": \"https://via.placeholder.com/300x300.png?text=Phone\",",
									"    \"Watches\": \"https://via.placeholder.com/300x300.png?text=Watch\",",
									"    \"Laptop\": \"https://via.placeholder.com/300x300.png?text=Laptop\"",
									"};",
									"const imageUrl = imageMap[category] || \"https://via.placeholder.com/300\";",
									"",
									"// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
									"pm.environment.set(\"product_name\", name);",
									"pm.environment.set(\"product_description\", description);",
									"pm.environment.set(\"product_price\", price);",
									"pm.environment.set(\"product_category\", category);",
									"pm.environment.set(\"product_manufacturer\", manufacturer);",
									"pm.environment.set(\"product_freeShipping\", freeShipping);",
									"pm.environment.set(\"product_imageUrl\", imageUrl);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{product_name}}\",\n  \"description\": \"{{product_description}}\",\n  \"price\": {{product_price}},\n  \"category\": \"{{product_category}}\",\n  \"manufacturer\": \"{{product_manufacturer}}\",\n  \"imageUrl\": \"{{product_imageUrl}}\",\n  \"freeShipping\": {{product_freeShipping}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}add-product",
							"host": [
								"{{url}}add-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 ERROR - add new product with wrong values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response contains error about invalid type for one of the fields\", () => {",
									"    const responseText = pm.response.text();",
									"    const fields = [",
									"        \"price\",",
									"        \"category\",",
									"        \"manufacturer\",",
									"        \"imageUrl\",",
									"        \"freeShipping\",",
									"        \"description\",",
									"        \"name\"",
									"    ];",
									"",
									"    const hasError = fields.some(field =>",
									"        responseText.includes(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è '${field}'`)",
									"    );",
									"",
									"    pm.expect(hasError).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"dd\",\n  \"description\": \"dd\",\n  \"price\": true,\n  \"category\": \"Phones\",\n  \"manufacturer\": \"Apple\",\n  \"imageUrl\": \"dddd\" ,\n  \"freeShipping\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}add-product",
							"host": [
								"{{url}}add-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - product search by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Check data types of response fields\", () => {",
									"    const jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"product_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"description\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"price\").that.is.a(\"string\"); // —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä \"2000.00\"",
									"    pm.expect(jsonData).to.have.property(\"category\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"manufacturer\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"imageUrl\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"freeShipping\").that.satisfy(val => val === 0 || val === 1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}products/id/{{product_id}}",
							"host": [
								"{{url}}products"
							],
							"path": [
								"id",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - product search by non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response contains '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω'\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}products/id/{{non-existent ID}}",
							"host": [
								"{{url}}products"
							],
							"path": [
								"id",
								"{{non-existent ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - full product update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response contains '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω'\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Apple 17 pro (–ø—Ä–µ–¥–∑–∞–∫–∞–∑)\",\n  \"description\": \"–û–ø–∏—Å–∞–Ω–∏–µ Apple 17 pro\",\n  \"price\": 3000 ,\n  \"category\": \"Phones\",\n  \"manufacturer\": \"Apple\",\n  \"imageUrl\": \"http://example.com/image.jpg\",\n  \"freeShipping\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}products/id/{{product_id}}",
							"host": [
								"{{url}}products"
							],
							"path": [
								"id",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 ERROR - full product update with wrong values",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": 1,\n  \"description\": \"–û–ø–∏—Å–∞–Ω–∏–µ Apple 17 pro\",\n  \"price\": 3000 ,\n  \"category\": \"Phones\",\n  \"manufacturer\": \"Apple\",\n  \"imageUrl\": \"http://example.com/image.jpg\",\n  \"freeShipping\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}products/id/{{product_id}}",
							"host": [
								"{{url}}products"
							],
							"path": [
								"id",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - full product update with non-existent ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Apple 17 pro (–ø—Ä–µ–¥–∑–∞–∫–∞–∑)\",\n  \"description\": \"–û–ø–∏—Å–∞–Ω–∏–µ Apple 17 pro\",\n  \"price\": 3000 ,\n  \"category\": \"Phones\",\n  \"manufacturer\": \"Apple\",\n  \"imageUrl\": \"http://example.com/image.jpg\",\n  \"freeShipping\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}products/id/{{non-existent ID}}",
							"host": [
								"{{url}}products"
							],
							"path": [
								"id",
								"{{non-existent ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - partial product update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"price\": 4000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}products/id/{{product_id}}",
							"host": [
								"{{url}}products"
							],
							"path": [
								"id",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 ERROR - partial product update with wrong ID format",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"price\": 3000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}products/id/rrrr",
							"host": [
								"{{url}}products"
							],
							"path": [
								"id",
								"rrrr"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - partial product update with non-existent ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"price\": 3333\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}products/id/{{non-existent ID}}",
							"host": [
								"{{url}}products"
							],
							"path": [
								"id",
								"{{non-existent ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - product delete by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}products/id/{{product_id}}",
							"host": [
								"{{url}}products"
							],
							"path": [
								"id",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 ERROR - product delete by banned ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}products/id/{{product ID from 1 to 50 }}",
							"host": [
								"{{url}}products"
							],
							"path": [
								"id",
								"{{product ID from 1 to 50 }}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - product delete by non-existent ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}products/id/{{product_id}}",
							"host": [
								"{{url}}products"
							],
							"path": [
								"id",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - filtering by category",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}products/FindByCategory?category=Watches",
							"host": [
								"{{url}}products"
							],
							"path": [
								"FindByCategory"
							],
							"query": [
								{
									"key": "category",
									"value": "Phones",
									"disabled": true
								},
								{
									"key": "category",
									"value": "Watches"
								},
								{
									"key": "category",
									"value": "Laptops",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - filtering by non-existent category",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}products/FindByCategory?category=Pear",
							"host": [
								"{{url}}products"
							],
							"path": [
								"FindByCategory"
							],
							"query": [
								{
									"key": "category",
									"value": "Pear"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - filtering by manufacturer",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}products/FindByManufacturer?manufacturer=Xiaomi",
							"host": [
								"{{url}}products"
							],
							"path": [
								"FindByManufacturer"
							],
							"query": [
								{
									"key": "manufacturer",
									"value": "Apple",
									"disabled": true
								},
								{
									"key": "manufacturer",
									"value": "Samsung",
									"disabled": true
								},
								{
									"key": "manufacturer",
									"value": "Huawei",
									"disabled": true
								},
								{
									"key": "manufacturer",
									"value": "Xiaomi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - filtering by non-existent manufacturer",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}products/FindByManufacturer?manufacturer=Pear",
							"host": [
								"{{url}}products"
							],
							"path": [
								"FindByManufacturer"
							],
							"query": [
								{
									"key": "manufacturer",
									"value": "Pear"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - filtering by shipping",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}products/FindByShipping?freeShipping=true",
							"host": [
								"{{url}}products"
							],
							"path": [
								"FindByShipping"
							],
							"query": [
								{
									"key": "freeShipping",
									"value": "true"
								},
								{
									"key": "freeShipping",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - filtering by shipping with wrong endpoint",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}products/FindByShippng?freeShipping=true",
							"host": [
								"{{url}}products"
							],
							"path": [
								"FindByShippng"
							],
							"query": [
								{
									"key": "freeShipping",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - filtering by all filters",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}products/filter?category=Phones&manufacturer=Apple&freeShipping=true&minPrice=200&maxPrice=3000",
							"host": [
								"{{url}}products"
							],
							"path": [
								"filter"
							],
							"query": [
								{
									"key": "category",
									"value": "Phones"
								},
								{
									"key": "manufacturer",
									"value": "Apple"
								},
								{
									"key": "freeShipping",
									"value": "true"
								},
								{
									"key": "minPrice",
									"value": "200"
								},
								{
									"key": "maxPrice",
									"value": "3000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - filtering by all filters with wrong value",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}products/filter?category=Pear&manufacturer=Pear&freeShipping=true&minPrice=-1&maxPrice=-100",
							"host": [
								"{{url}}products"
							],
							"path": [
								"filter"
							],
							"query": [
								{
									"key": "category",
									"value": "Pear"
								},
								{
									"key": "manufacturer",
									"value": "Pear"
								},
								{
									"key": "freeShipping",
									"value": "true"
								},
								{
									"key": "minPrice",
									"value": "-1"
								},
								{
									"key": "maxPrice",
									"value": "-100"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_key}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "200 OK - add product to cart",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": 1,\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cart",
							"host": [
								"{{url}}cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 ERROR - add product to cart without authorization",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": 1,\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cart",
							"host": [
								"{{url}}cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 ERROR - add product to cart with wrong data",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": 50,\n  \"quantity\": \"ddd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cart",
							"host": [
								"{{url}}cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "500 ERROR - add product to cart with non-existent product ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": 51,\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cart",
							"host": [
								"{{url}}cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - get the contents of the user's cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü–æ–ª—É—á–∞–µ–º JSON-–æ—Ç–≤–µ—Ç",
									"let response = pm.response.json();",
									"",
									"// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏ –≤ –Ω—ë–º –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç",
									"if (Array.isArray(response) && response.length > 0) {",
									"    let firstCartItemId = response[0].cart_item_id;",
									"",
									"    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º",
									"    if (firstCartItemId !== undefined && typeof firstCartItemId === 'number') {",
									"        pm.environment.set(\"firstCartItemId\", firstCartItemId);",
									"        console.log(\"‚úÖ Saved cart_item_id:\", firstCartItemId);",
									"    } else {",
									"        console.log(\"‚ùå cart_item_id is not valid.\");",
									"    }",
									"} else {",
									"    console.log(\"‚ùå Response is not a valid array or it's empty.\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}getCart",
							"host": [
								"{{url}}getCart"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 ERROR - get the contents of the user's cart without authorization",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "https://qa.demoshopping.ru/getCart",
							"protocol": "https",
							"host": [
								"qa",
								"demoshopping",
								"ru"
							],
							"path": [
								"getCart"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - change the quantity of an item in the cart",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cart/{{firstCartItemId}}",
							"host": [
								"{{url}}cart"
							],
							"path": [
								"{{firstCartItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 ERROR - change the quantity of an item in the cart without authorization",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cart/{{firstCartItemId}}",
							"host": [
								"{{url}}cart"
							],
							"path": [
								"{{firstCartItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - change the quantity of an item in the cart with non-existent cart item ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cart/51",
							"host": [
								"{{url}}cart"
							],
							"path": [
								"51"
							]
						}
					},
					"response": []
				},
				{
					"name": "500 ERROR - change the quantity of an item in the cart with wrong data",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": \"ggg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cart/{{firstCartItemId}}",
							"host": [
								"{{url}}cart"
							],
							"path": [
								"{{firstCartItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - delete an item from the shopping cart",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}cart/{{firstCartItemId}}",
							"host": [
								"{{url}}cart"
							],
							"path": [
								"{{firstCartItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 ERROR - delete an item from the shopping cart with wrong data",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}cart/hhh",
							"host": [
								"{{url}}cart"
							],
							"path": [
								"hhh"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 ERROR - delete an item from the shopping cart without authorization",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}cart/{{firstCartItemId}}",
							"host": [
								"{{url}}cart"
							],
							"path": [
								"{{firstCartItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - delete an item from the shopping cart with non-existent cart item ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}cart/51",
							"host": [
								"{{url}}cart"
							],
							"path": [
								"51"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - add product to cart Copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": 2,\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cart",
							"host": [
								"{{url}}cart"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "201 OK - create an order from items in the user's shopping cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}orders",
							"host": [
								"{{url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 ERROR - create an order from items in the user's shopping cart without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}orders",
							"host": [
								"{{url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - get a list of all the user's products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç ‚Äî –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤",
									"let responseData = pm.response.json();",
									"",
									"// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ order_id",
									"if (Array.isArray(responseData) && responseData.length > 0 && responseData[0].order_id !== undefined) {",
									"    let orderId = responseData[0].order_id;",
									"",
									"    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è",
									"    pm.environment.set(\"ORDER_ID\", orderId);",
									"",
									"    console.log(\"‚úÖ ORDER_ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\", orderId);",
									"} else {",
									"    console.warn(\"‚ö†Ô∏è order_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ.\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}user-orders",
							"host": [
								"{{url}}user-orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 ERROR - get a list of all the user's products without auhorization",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}user-orders",
							"host": [
								"{{url}}user-orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - change the quantity of an item in the order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}orders/{{ORDER_ID}}/products/2",
							"host": [
								"{{url}}orders"
							],
							"path": [
								"{{ORDER_ID}}",
								"products",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 ERROR - change the quantity of an item in the order without authorization",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}orders/{{ORDER_ID}}/products/1",
							"host": [
								"{{url}}orders"
							],
							"path": [
								"{{ORDER_ID}}",
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - change the quantity of an item in the order with non-existent product ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}orders/{{ORDER_ID}}/products/99999999999",
							"host": [
								"{{url}}orders"
							],
							"path": [
								"{{ORDER_ID}}",
								"products",
								"99999999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - update orders total price",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}update-orders-total",
							"host": [
								"{{url}}update-orders-total"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 ERROR - update orders total price without authorization",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}update-orders-total",
							"host": [
								"{{url}}update-orders-total"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - get data about paid orders for an authorized user.",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}api/orders-history",
							"host": [
								"{{url}}api"
							],
							"path": [
								"orders-history"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 ERROR - get data about paid orders for an authorized user without authorization",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}api/orders-history",
							"host": [
								"{{url}}api"
							],
							"path": [
								"orders-history"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - delete product from order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}orders/{{ORDER_ID}}/products/2",
							"host": [
								"{{url}}orders"
							],
							"path": [
								"{{ORDER_ID}}",
								"products",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 ERROR - delete product from order without authorization",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}orders/{{ORDER_ID}}/products/1",
							"host": [
								"{{url}}orders"
							],
							"path": [
								"{{ORDER_ID}}",
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 ERROR - delete product from order with non-existent product ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}orders/{{ORDER_ID}}/products/51",
							"host": [
								"{{url}}orders"
							],
							"path": [
								"{{ORDER_ID}}",
								"products",
								"51"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 OK - create an order from items in the user's shopping cart Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}orders",
							"host": [
								"{{url}}orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "200 OK - update Balances",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}updateBalances",
							"host": [
								"{{url}}updateBalances"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 ERROR - payment by card VISA with wrong card_code",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_type\": \"VISA\",\n  \"card_code\": \"1111222233334444\",\n  \"expiry_month\": 12,\n  \"expiry_year\": 26,\n  \"cvv\": \"123\",\n  \"email\": \"user@example.com\",\n  \"email_paypal\": \"user@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}pay",
							"host": [
								"{{url}}pay"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 ERROR - payment by card VISA without authorization",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_type\": \"VISA\",\n  \"card_code\": \"8820354696467284\",\n  \"expiry_month\": 12,\n  \"expiry_year\": 26,\n  \"cvv\": \"123\",\n  \"email\": \"user@example.com\",\n  \"email_paypal\": \"user@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}pay",
							"host": [
								"{{url}}pay"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 OK - payment by card VISA",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_key}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_type\": \"VISA\",\n  \"card_code\": \"8820354696467284\",\n  \"expiry_month\": 12,\n  \"expiry_year\": 26,\n  \"cvv\": \"123\",\n  \"email\": \"user@example.com\",\n  \"email_paypal\": \"user@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}pay",
							"host": [
								"{{url}}pay"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}